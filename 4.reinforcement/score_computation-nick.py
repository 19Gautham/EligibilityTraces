from game import GameStateData
from game import Game
from game import Directions
from game import Actions
from util import nearestPoint
from util import manhattanDistance
import util
import layout
import sys
import types
import time
import random
import os
import subprocess
from scipy.stats import shapiro
from scipy.stats import ttest_rel

# directory_path_layouts = "/Users/nikunjphutela/Downloads/AI project 3 - reinforcement learning/layouts"

# directory_path = "/Users/nikunjphutela/Downloads/AI project 3 - reinforcement learning"

# # Change the current working directory
# os.chdir(directory_path)

# layouts = []

# # List all files in the directory
# files = os.listdir(directory_path_layouts)

# def sort_key(filename):
#     # Extract the number part of the filename and convert it to integer
#     return int(filename.split('_')[1].split('.')[0])

# # Filter out files that start with "test_"
# test_files = [file for file in files if file.startswith("test_")]

# # Sort the filtered files
# sorted_files = sorted(test_files, key=sort_key)

# # Semi gradient agent
# for file in sorted_files:
#     layout_name = file.split('.')[0]
#     print(layout_name)
#     command = f"python /Users/nikunjphutela/Downloads/AI\ project\ 3\ -\ reinforcement\ learning/pacman.py -p ApproximateQAgent -x 50 -n 65 -l {layout_name} -q"
#     subprocess.run(command, shell=True)

# os.rename("/Users/nikunjphutela/Downloads/AI project 3 - reinforcement learning/score_0.txt", "/Users/nikunjphutela/Downloads/AI project 3 - reinforcement learning/score_semi_gradient_agent.txt")

# with open("/Users/nikunjphutela/Downloads/AI project 3 - reinforcement learning/score_semi_gradient_agent.txt", "r") as file:
#     scores_semi_gradient = [float(line.strip()) for line in file]

# print(scores_semi_gradient)

q_learning_extractor_3 = [79.73333333333333, -73.8, -25.066666666666666, -51.86666666666667, -48.4, -184.8, 12.133333333333333, 165.93333333333334, 295.93333333333334, -289.93333333333334, 341.46666666666664, 342.1333333333333, -83.93333333333334, 759.6, -99.6, -288.1333333333333, 242.93333333333334, 247.66666666666666, -26.2, -266.6, -163.93333333333334, 2.533333333333333, 134.06666666666666, -108.26666666666667, 63.46666666666667, -80.8, -376.26666666666665, -99.33333333333333, -139.46666666666667, -140.53333333333333, -298.73333333333335, -280.3333333333333, -51.2, -102.33333333333333, 60.0, 155.13333333333333, -50.06666666666667, 20.866666666666667, 473.6666666666667, -174.66666666666666, -270.2, -189.33333333333334, -53.46666666666667, 7.8, -341.0, -96.26666666666667, 19.666666666666668, 262.53333333333336, 114.66666666666667, 327.93333333333334, -94.86666666666666, -90.33333333333333, -319.3333333333333, -409.6, -100.06666666666666, 94.46666666666667, 10.866666666666667, 95.2, -238.6, 19.266666666666666, 20.8, -42.46666666666667, -227.0, -465.8666666666667, -53.666666666666664, -118.66666666666667, 112.26666666666667, -53.733333333333334, -26.4, 6.2, 30.4, 460.46666666666664, 502.6, 276.46666666666664, 84.73333333333333, 114.8, 302.06666666666666, -73.26666666666667, -238.2, -21.733333333333334, 80.26666666666667, 193.2, 427.26666666666665, 332.6666666666667, -9.133333333333333, 705.0666666666667, 215.2, -295.73333333333335, -419.4, 156.6, 535.2, -88.26666666666667, -378.53333333333336, 450.8666666666667, 84.0, -7.2, -280.93333333333334, -113.06666666666666, -501.0, 129.8]

true_online_td_lambda_extractor_3 = [267.0, 290.6666666666667, 663.6666666666666, 59.93333333333333, 60.6, -392.8, -35.733333333333334, 188.8, -142.26666666666668, 92.8, 407.26666666666665, 541.0, -100.2, 799.6666666666666, -584.4, -192.0, 217.73333333333332, -42.06666666666667, -60.46666666666667, -160.2, 31.066666666666666, 38.46666666666667, 607.2, -246.06666666666666, -396.3333333333333, -87.66666666666667, -489.06666666666666, -80.8, -48.13333333333333, 41.6, -312.26666666666665, -129.6, -93.06666666666666, -50.53333333333333, 15.533333333333333, 171.86666666666667, 1.4666666666666666, -348.93333333333334, 314.46666666666664, 12.933333333333334, -303.8, -210.2, 55.06666666666667, -59.666666666666664, -219.26666666666668, 103.4, -16.866666666666667, 716.0666666666667, -95.26666666666667, 303.3333333333333, -92.26666666666667, -79.2, -470.73333333333335, -376.8, -64.73333333333333, 168.8, -205.46666666666667, 295.6, -491.6666666666667, 173.66666666666666, 13.133333333333333, -336.8666666666667, -183.73333333333332, -192.26666666666668, 310.3333333333333, -238.53333333333333, 52.4, 80.66666666666667, -24.533333333333335, 25.733333333333334, 221.73333333333332, 320.3333333333333, 155.0, 492.53333333333336, 19.533333333333335, -219.53333333333333, 226.0, -322.06666666666666, -180.06666666666666, -475.0, 121.33333333333333, 177.6, 317.1333333333333, 510.26666666666665, 166.33333333333334, 687.7333333333333, 142.2, -305.0, -250.4, 125.46666666666667, -175.73333333333332, -180.46666666666667, -430.46666666666664, 55.0, 48.266666666666666, 87.4, -232.73333333333332, -320.8, -501.0, -68.66666666666667]

semi_gradient_extractor_3 = [75.13333333333334, -39.46666666666667, 27.4, -133.66666666666666, -143.73333333333332, -244.0, -26.666666666666668, 307.8, -86.6, 101.46666666666667, 257.93333333333334, 397.3333333333333, -221.26666666666668, 563.8666666666667, -279.2, -310.8666666666667, 179.86666666666667, 64.33333333333333, -74.66666666666667, -161.86666666666667, -55.666666666666664, -78.66666666666667, 191.0, -260.8666666666667, -316.93333333333334, -113.0, -289.6, -162.66666666666666, -162.2, -93.13333333333334, -243.0, -369.73333333333335, -176.13333333333333, -260.93333333333334, 29.133333333333333, 1.6, -30.333333333333332, -182.93333333333334, 626.6666666666666, -26.333333333333332, -335.6, -40.0, 8.066666666666666, -216.53333333333333, -265.53333333333336, -44.0, 26.133333333333333, 497.53333333333336, -47.8, 143.73333333333332, -21.2, -170.2, -311.93333333333334, -420.6, -91.86666666666666, -31.333333333333332, -150.6, -75.8, -354.46666666666664, -151.8, -187.26666666666668, -112.73333333333333, -448.46666666666664, -223.66666666666666, -132.26666666666668, -56.4, 145.46666666666667, -351.46666666666664, -107.46666666666667, 143.0, 160.06666666666666, 160.0, 334.0, 299.6666666666667, 415.0, -8.0, -144.8, -277.93333333333334, -108.2, 71.53333333333333, 163.66666666666666, 143.8, 290.0, 219.06666666666666, -40.53333333333333, 482.0, -114.93333333333334, -409.0, -351.8, 136.73333333333332, 240.93333333333334, -12.666666666666666, -161.26666666666668, 143.6, -185.4, -9.6, -430.3333333333333, -176.4, -475.2, 1.2]

q_learning_extractor = [-121.33333333333333, -77.8, -187.46666666666667, -29.2, -244.4, -112.73333333333333, 18.733333333333334, -174.93333333333334, -168.13333333333333, -167.86666666666667, 441.46666666666664, 170.26666666666668, -222.06666666666666, 661.8, -103.0, -358.1333333333333, -153.93333333333334, -230.6, -73.73333333333333, -388.6, -135.2, -155.66666666666666, -90.73333333333333, -260.73333333333335, -234.86666666666667, -251.0, -430.6, -172.66666666666666, -211.66666666666666, -244.53333333333333, -220.73333333333332, -170.33333333333334, -46.2, -253.93333333333334, -88.33333333333333, -123.8, 26.666666666666668, -100.2, -99.8, 70.4, -348.93333333333334, -163.06666666666666, -197.53333333333333, -206.93333333333334, -126.46666666666667, -371.3333333333333, -199.26666666666668, 283.2, -143.8, 74.2, -284.6666666666667, -116.33333333333333, -263.8, -416.53333333333336, -186.4, -149.66666666666666, -236.06666666666666, -7.666666666666667, -481.46666666666664, 5.066666666666666, -141.93333333333334, -220.53333333333333, -409.0, -348.06666666666666, -193.86666666666667, -176.33333333333334, -8.533333333333333, -156.4, -114.13333333333334, -52.86666666666667, 332.0, -21.6, 84.66666666666667, 318.53333333333336, -106.06666666666666, 90.2, -151.4, -7.933333333333334, -381.46666666666664, -16.933333333333334, -84.93333333333334, -85.06666666666666, 119.4, 20.866666666666667, -70.73333333333333, -88.0, -147.4, -367.6666666666667, -364.46666666666664, 229.33333333333334, -173.53333333333333, 44.266666666666666, -258.26666666666665, 74.2, -125.66666666666667, -135.26666666666668, -168.93333333333334, -189.73333333333332, -501.0, -123.4]
q_learning_extractor_2 = [55.8, -58.2, -89.73333333333333, -8.533333333333333, -236.33333333333334, -304.26666666666665, -113.33333333333333, -30.4, -353.73333333333335, -176.93333333333334, 520.9333333333333, 90.06666666666666, 67.4, 466.26666666666665, -273.2, -80.66666666666667, -190.86666666666667, 43.266666666666666, -267.0, -401.46666666666664, -9.466666666666667, -226.86666666666667, -123.73333333333333, -172.13333333333333, -322.2, -185.93333333333334, -395.0, -262.3333333333333, -182.46666666666667, -205.2, -199.8, -240.73333333333332, -43.93333333333333, -120.66666666666667, -6.6, -56.53333333333333, -112.6, -116.73333333333333, 90.13333333333334, -90.0, -351.2, -209.4, -34.53333333333333, -166.33333333333334, -320.06666666666666, -263.6, -176.4, 448.0, -48.53333333333333, 112.6, -287.26666666666665, -112.4, -279.6, -387.53333333333336, -202.26666666666668, -75.4, -233.06666666666666, -33.46666666666667, -352.06666666666666, 1.2, -169.66666666666666, -98.4, -382.4, -258.46666666666664, -175.33333333333334, -249.4, -109.13333333333334, -96.06666666666666, -13.133333333333333, 74.4, 198.86666666666667, -31.6, -85.66666666666667, 370.8, 63.266666666666666, -68.13333333333334, -124.26666666666667, -172.73333333333332, -212.06666666666666, -280.6666666666667, -81.06666666666666, -7.6, 155.26666666666668, 114.6, -206.8, 1.2666666666666666, -57.46666666666667, -327.1333333333333, -345.06666666666666, -15.266666666666667, -198.33333333333334, -55.4, -328.93333333333334, -154.93333333333334, -106.6, 37.4, -251.73333333333332, -208.0, -501.0, -127.66666666666667]

z = []
ignore_envs = [2, 22, 79, 85]
new_true_online_td_lambda_extractor_3 = list()
new_q_learning_extractor_2 = list()
new_semi_gradient_extractor_3 = list()
for i in range(len(semi_gradient_extractor_3)):
    if i in ignore_envs:
        continue
    else:
        new_true_online_td_lambda_extractor_3.append(true_online_td_lambda_extractor_3[i])
        new_q_learning_extractor_2.append(q_learning_extractor_2[i])
        new_semi_gradient_extractor_3.append(semi_gradient_extractor_3[i])
        z.append(true_online_td_lambda_extractor_3[i] - semi_gradient_extractor_3[i])

true_online_greater_than_q = [i for i in range(len(new_true_online_td_lambda_extractor_3)) if new_true_online_td_lambda_extractor_3[i] > new_q_learning_extractor_2[i]]
semi_greater_than_q = [i for i in range(len(new_semi_gradient_extractor_3)) if new_semi_gradient_extractor_3[i] > new_q_learning_extractor_2[i]]

q_greater_than_true_online = [i for i in range(len(new_true_online_td_lambda_extractor_3)) if new_true_online_td_lambda_extractor_3[i] < new_q_learning_extractor_2[i]]
q_greater_than_semi = [i for i in range(len(new_semi_gradient_extractor_3)) if new_semi_gradient_extractor_3[i] < new_q_learning_extractor_2[i]]


intersection = [q_greater_than_true_online[i] for i in range(len(q_greater_than_true_online)) if q_greater_than_true_online[i] in q_greater_than_semi]

print("Intersect: {}".format(intersection))

list1 = []
scores = []
max_diff = 0
max_index = -1
for index in intersection:
    if new_true_online_td_lambda_extractor_3[index] > new_semi_gradient_extractor_3[index]:
        if new_true_online_td_lambda_extractor_3[index] == 38.46666666666667:
            print("Index: {}".format(index))
        list1.append(index)
        diff = new_true_online_td_lambda_extractor_3[index] - new_semi_gradient_extractor_3[index]
        scores.append((new_true_online_td_lambda_extractor_3[index], new_semi_gradient_extractor_3[index], new_q_learning_extractor_2[index]))
        if diff > max_diff:
            max_diff = diff
            max_index = index

print(list1)
print(scores)

print(max_index)
print((new_true_online_td_lambda_extractor_3[max_index], new_semi_gradient_extractor_3[max_index], new_q_learning_extractor_2[max_index]))
    

# new_list = [x for x in z if x>-500]
#
# num_negative_values = [x for x in z if x < 0]
# layouts_removed = list()
#
# for index,number in enumerate(z):
#     if number in new_list:
#         continue
#     else:
#         layouts_removed.append(index)
# print(f"layouts removed: {layouts_removed}")
#
# print(f"Number of cases where Q learning beats semi gradient :{len(num_negative_values)}")
#
# # print(f"len of new_list: {len(new_list)}")
# # indexes_removed = [i for i, x in enumerate(z) if not (x > -750)]
# # print(f"index of elements removed: {indexes_removed}")
#
# print(len(new_list))
# print(new_list)
# stat, p = shapiro(new_list)
#
# print("Shapiro-Wilk Test Statistic:", stat)
# print("P-value:", p)
#
# if p > 0.05:
#     print("The data appears to be normally distributed (fail to reject H0)")
# else:
#     print("The data does not appear to be normally distributed (reject H0)")
#
#
# t_statistic, p_value = ttest_rel(new_true_online_td_lambda_extractor_3, new_semi_gradient_extractor_3)
#
# print("\n\nT-statistic:", t_statistic)
# print("P-value:", p_value)
#
# if p_value < 0.05:
#     print("There is a statistically significant difference between the means.")
# else:
#     print("There is no statistically significant difference between the means.")

