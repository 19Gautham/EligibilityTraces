from scipy.stats import shapiro
from scipy.stats import ttest_rel

if __name__ == "__main__":
    
    # list1 = [547.2666666666667, 2476.133333333333, 1654.8666666666666, 988.0, 452.46666666666664, 2686.0, 1134.4666666666667, 823.8, 1377.5333333333333, 1052.6666666666667, 1114.0666666666666, 2140.266666666667, 229.53333333333333, 1968.7333333333333, 912.5333333333333, 803.0666666666667, 1488.0, 1392.6, 1316.1333333333334, 660.3333333333334, 362.8666666666667, 1225.2, 1345.3333333333333, 1226.5333333333333, 606.8, 3257.133333333333, 2517.266666666667, 783.4666666666667, 1648.7333333333333, 332.8, 652.3333333333334, 1064.1333333333334, 1651.8666666666666, 1354.8, 894.1333333333333, 2313.733333333333, -305.3333333333333, 1459.5333333333333, 1130.1333333333334, 1584.8666666666666, 781.9333333333333, 768.8666666666667, 1098.0, 1364.6, 1325.6666666666667, 634.8666666666667, 399.93333333333334, 740.8, 884.7333333333333, 1178.4, -84.66666666666667, 228.93333333333334, 3189.3333333333335, 1649.5333333333333, 1756.4, 656.5333333333333, 645.6, 983.5333333333333, 593.0, 681.8666666666667, 1559.1333333333334, 831.0666666666667, 2719.8, 1239.2, 3197.0, 937.1333333333333, 1785.9333333333334, 920.0, 2560.6666666666665, 1820.4666666666667, 1588.5333333333333, 955.7333333333333, 2364.9333333333334, 213.73333333333332, 154.13333333333333, 581.9333333333333, 362.1333333333333, 872.5333333333333, 3224.733333333333, 1390.1333333333334, 1490.7333333333333, 2579.9333333333334, 1429.6666666666667, 719.7333333333333, 637.1333333333333, 539.2, 790.2666666666667, 793.3333333333334, 1557.8666666666666, 1071.4, 1684.6, 1476.3333333333333, 2437.8, 980.0666666666667, 747.2666666666667, 261.6, 850.2, 2629.5333333333333, 863.2, 2486.733333333333]
    # index_list = [1 if x>2000 else 0 for x in list1]
    # result = []
    # for i in range(len(index_list)):
    #     if index_list[i]:
    #         result.append(i)
    #
    # print(result)
    base_dir_path = "C:\\Users\\gdjk9\\OneDrive\\Desktop\\CSE 571 Artifical Intelligence\\Project\\Project 3\\3.reinforcement\\4.reinforcement\\"
    #
    # qLearning = [1821.2, -163.26666666666668, 1599.4, 1284.0, 1483.6666666666667, 786.8666666666667, 1080.0, 617.4, 606.4, 1000.1333333333333, 2334.8, 750.6, 1038.8666666666666, 959.2, 378.93333333333334, 2159.8, 1865.6, 689.1333333333333, 1247.0666666666666, 2567.0666666666666, 656.1333333333333, 2619.6666666666665, 785.2666666666667, 2059.2, 366.2, 1345.9333333333334, 307.26666666666665, 170.93333333333334, 1283.4, 838.6, 924.5333333333333, 574.8, 1316.9333333333334, 605.5333333333333, -129.6, 1972.3333333333333, 804.8666666666667, 1295.8, 826.8666666666667, 269.26666666666665, 783.3333333333334, 48.13333333333333, 2401.2, 733.6, 526.8, 439.3333333333333, 627.0666666666667, 1294.7333333333333, 962.1333333333333, 504.26666666666665, 1007.5333333333333, 389.73333333333335, 484.46666666666664, 1660.5333333333333, 1128.6666666666667, 793.0, 1437.6, 706.6, 453.93333333333334, 804.6, 1435.6, 6.866666666666666, 925.2666666666667, 3135.733333333333, 506.73333333333335, 2312.266666666667, 201.8, 1248.0, 2112.6666666666665, 587.8666666666667, 1875.0666666666666, 328.3333333333333, -248.2, 985.7333333333333, 664.8666666666667, 512.9333333333333, 2259.8, 498.1333333333333, -56.333333333333336, 342.0, 862.9333333333333, 1886.0666666666666, 1371.8666666666666, 1781.9333333333334, 822.6666666666666, 1171.2666666666667, 470.2, 221.8, 33.666666666666664, 1296.4, 1798.8, 748.8666666666667, 297.8, 789.2, 1890.6, 846.8, 1046.3333333333333, 734.4, 700.2666666666667, 699.0666666666667]
    # semIgradient = [-411.4, -289.46666666666664, -370.93333333333334, -350.6666666666667, -282.6666666666667, -324.8, -446.8666666666667, -449.6, -424.0, -356.6, -339.1333333333333, -365.3333333333333, -314.2, -362.46666666666664, -386.8666666666667, -344.6666666666667, -345.8, -364.8, -188.33333333333334, -196.2, -262.46666666666664, -282.0, -452.4, -259.46666666666664, -437.3333333333333, -317.4, -464.26666666666665, -214.6, -388.2, -260.6, -313.0, -249.53333333333333, -348.6, -139.86666666666667, -261.2, -505.3333333333333, -503.0, -329.53333333333336, -690.8666666666667, -438.06666666666666, -405.2, -466.93333333333334, -404.6666666666667, -325.4, -444.73333333333335, -192.46666666666667, -381.8, -381.1333333333333, -481.53333333333336, -474.53333333333336, -448.1333333333333, -160.53333333333333, -456.73333333333335, -393.2, -402.8666666666667, -440.4, -442.06666666666666, -320.2, -307.2, -273.4, -373.26666666666665, 19.733333333333334, -452.46666666666664, -890.5333333333333, -399.26666666666665, -247.06666666666666, -161.6, -327.3333333333333, -491.46666666666664, -435.6, -421.06666666666666, -488.0, -382.06666666666666, -171.53333333333333, -378.46666666666664, -429.46666666666664, -355.53333333333336, -416.4, -141.86666666666667, -135.33333333333334, -464.0, -379.93333333333334, -376.53333333333336, -343.6, -363.4, -483.93333333333334, -248.4, -244.0, -153.8, -477.93333333333334, -444.3333333333333, -364.0, -353.53333333333336, -440.6666666666667, -345.0, -411.73333333333335, -541.2666666666667, -425.2, -352.6, -438.06666666666666]
    #
    with open(base_dir_path + "score_q_learning_agent.txt", "r") as file:
        scores_true_online_td_lambda = [float(line.strip()) for line in file]
    
    print(scores_true_online_td_lambda)
    # #
    # # # ignore_list = [1, 5, 11, 25, 26, 35, 52, 62, 64, 68, 72, 78, 81, 92, 97, 99]
    # #
    # # filtered_true_online = []
    # # for i in range(len(scores_true_online_td_lambda)):
    # #     if i in ignore_list:
    # #         continue
    # #
    # #     filtered_true_online.append(scores_true_online_td_lambda[i])
    # #
    # #
    # # print(len(filtered_true_online))
    # # print(len(qLearning))
    # #
    # # z = []
    # # for i in range(len(qLearning)):
    # #     # print(semIgradient[i] - qLearning[])
    # #
    # #     z.append(filtered_true_online[i] - qLearning[i])
    # #
    # # print(z)
    # #
    # # stat, p = shapiro(z)
    # #
    # # print("Shapiro-Wilk Test Statistic:", stat)
    # # print("P-value:", p)
    # #
    # # if p > 0.05:
    # #     print("The data appears to be normally distributed (fail to reject H0)")
    # # else:
    # #     print("The data does not appear to be normally distributed (reject H0)")
    #
    # l1 = [1821.2, -163.26666666666668, 1599.4, 1284.0, 1483.6666666666667, 786.8666666666667, 1080.0, 617.4, 606.4, 1000.1333333333333, 2334.8, 750.6, 1038.8666666666666, 959.2, 378.93333333333334, 2159.8, 1865.6, 689.1333333333333, 1247.0666666666666, 2567.0666666666666, 656.1333333333333, 2619.6666666666665, 785.2666666666667, 2059.2, 366.2, 1345.9333333333334, 307.26666666666665, 170.93333333333334, 1283.4, 838.6, 924.5333333333333, 574.8, 1316.9333333333334, 605.5333333333333, -129.6, 1972.3333333333333, 804.8666666666667, 1295.8, 826.8666666666667, 269.26666666666665, 783.3333333333334, 48.13333333333333, 2401.2, 733.6, 526.8, 439.3333333333333, 627.0666666666667, 1294.7333333333333, 962.1333333333333, 504.26666666666665, 1007.5333333333333, 389.73333333333335, 484.46666666666664, 1660.5333333333333, 1128.6666666666667, 793.0, 1437.6, 706.6, 453.93333333333334, 804.6, 1435.6, 6.866666666666666, 925.2666666666667, 3135.733333333333, 506.73333333333335, 2312.266666666667, 201.8, 1248.0, 2112.6666666666665, 587.8666666666667, 1875.0666666666666, 328.3333333333333, -248.2, 985.7333333333333, 664.8666666666667, 512.9333333333333, 2259.8, 498.1333333333333, -56.333333333333336, 342.0, 862.9333333333333, 1886.0666666666666, 1371.8666666666666, 1781.9333333333334, 822.6666666666666, 1171.2666666666667, 470.2, 221.8, 33.666666666666664, 1296.4, 1798.8, 748.8666666666667, 297.8, 789.2, 1890.6, 846.8, 1046.3333333333333, 734.4, 700.2666666666667, 699.0666666666667]
    # ignore_list = [1, 5, 11, 25, 26, 35, 52, 62, 64, 68, 72, 78, 81, 92, 97, 99]
    # count = 0
    # mapping = {}
    # filter1_semiGrad = []
    # for i in range(len(l1)):
    #     if i in ignore_list:
    #         continue
    #     filter1_semiGrad.append(l1[i])
    #     mapping[count] = i
    #     i += 1
    #
    # with open(base_dir_path + "score_true_online_td_lambda_agent.txt", "r") as file:
    #     scores_true_online_td_lambda = [float(line.strip()) for line in file]
    #
    # l1 = [10, 15, 19, 21, 42, 63, 65, 68, 76]
    # l2 =  [21, 22, 31, 45, 53, 55, 58, 62, 66]
    #
    # union_list = list(set(l1 + l2))
    #
    # z = []
    # filtered_semiGrad = []
    # filtered_totd = []
    # removed_list = []
    # for i in range(len(scores_true_online_td_lambda)):
    #     # if 0<= scores_true_online_td_lambda[i] <=2500:
    #     #     z.append(scores_true_online_td_lambda[i] - q_score[i])
    #     # else:
    #     #     removed_list.append(i)
    #     # if i in union_list:
    #     #     continue
    #     z.append(scores_true_online_td_lambda[i] - filter1_semiGrad[i]) 
    #     filtered_totd.append(scores_true_online_td_lambda[i])
    #     filtered_semiGrad.append(filter1_semiGrad[i]) 
    #
    #
    # # print("Removed list: {}".format(removed_list))
    #
    # # print("Filtered totd: {}".format(filtered_totd))
    # # print("Filtered q score: {}".format(filtered_q))
    #
    # print(z)
    #
    # x = [1 if filtered_totd[i] > filter1_semiGrad[i] else 0 for i in range(len(filtered_totd))]
    # c0 = 0
    # c1 = 0
    # for i in range(len(x)):
    #     if x[i]:
    #         c1 += 1
    #     else:
    #         c0 += 1
    # print("CO: {}".format(c0))
    # print("C1: {}".format(c1))
    #
    #
    # import statistics
    #
    # print(statistics.mean(z))
    # print(statistics.variance(z))
    #
    # stat, p = shapiro(z)
    #
    # print("Shapiro-Wilk Test Statistic:", stat)
    # print("P-value:", p)
    #
    # if p > 0.05:
    #     print("The data appears to be normally distributed (fail to reject H0)")
    # else:
    #     print("The data does not appear to be normally distributed (reject H0)")
    #
    #
    # t_statistic, p_value = ttest_rel(filtered_totd, filtered_semiGrad)
    #
    # print("\n\nT-statistic:", t_statistic)
    # print("P-value:", p_value)
    #
    # if p_value < 0.05:
    #     print("There is a statistically significant difference between the means.")
    # else:
    #     print("There is no statistically significant difference between the means.")
    #
    #
    # # print(len(filter1_semiGrad))

